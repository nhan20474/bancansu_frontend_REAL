/**
 * FeedbackPage: Allows users to submit feedback about officers or the system.
 */
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import './FeedbackPage.css';

const API_BASE = 'http://localhost:8080';

interface Officer {
  MaNguoiDung: number;
  HoTen: string;
  ChucVu?: string;
  Lop?: string;
  // Th√™m c√°c tr∆∞·ªùng cho d·ªØ li·ªáu m·ªõi t·ª´ API
  TenCanSu?: string;
  TenLop?: string;
}

interface FeedbackItem {
  MaDanhGia: number;
  NguoiGui: number;
  TenNguoiGui: string;
  CanSuDuocDanhGia: number;
  TenCanSu: string;
  TieuChi: string;
  NoiDung: string;
  NgayGui: string;
  MucLabel?: string; // ƒê√£ th√™m tr∆∞·ªùng n√†y ƒë·ªÉ nh·∫≠n nh√£n m·ª©c ƒë·ªô t·ª´ backend
  AnDanh?: boolean; // Th√™m tr∆∞·ªùng n√†y ƒë·ªÉ h·ªó tr·ª£ ·∫©n danh
}

// Danh s√°ch ti√™u ch√≠ ƒë√°nh gi√° v·ªõi t√¥ng m√†u t·ªëi gi·∫£n
const CRITERIA_OPTIONS = [
  { value: 1, label: 'C·∫ßn c·∫£i thi·ªán', text: 'C·∫ßn c·∫£i thi·ªán', color: '#dc2626' },
  { value: 2, label: 'Trung b√¨nh', text: 'Trung b√¨nh', color: '#ea580c' },
  { value: 3, label: 'Kh√°', text: 'Kh√°', color: '#ca8a04' },
  { value: 4, label: 'T·ªët', text: 'T·ªët', color: '#16a34a' },
  { value: 5, label: 'Xu·∫•t s·∫Øc', text: 'Xu·∫•t s·∫Øc', color: '#059669' }
];

const FeedbackPage: React.FC = () => {
  const [officers, setOfficers] = useState<Officer[]>([]);
  const [selectedOfficer, setSelectedOfficer] = useState('');
  const [criteria, setCriteria] = useState<number>(3);
  const [comment, setComment] = useState('');
  const [msg, setMsg] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);
  const [dataLoading, setDataLoading] = useState(true);
  const [recentFeedbacks, setRecentFeedbacks] = useState<FeedbackItem[]>([]);
  const [feedbackStats, setFeedbackStats] = useState({ total: 0, avgRating: 0 });
  const [anonymous, setAnonymous] = useState(false);

  useEffect(() => {
    loadInitialData();
  }, []);

  const loadInitialData = async () => {
    setDataLoading(true);
    try {
      await Promise.all([
        loadOfficers(),
        loadRecentFeedbacks()
      ]);
    } catch (error) {
      console.error('Error loading initial data:', error);
    } finally {
      setDataLoading(false);
    }
  };

  const loadOfficers = async () => {
    try {
      // L·∫•y danh s√°ch c√°n s·ª± t·ª´ backend (role=cansu)
      const response = await axios.get(`${API_BASE}/api/cansu`);
      if (response.data && Array.isArray(response.data)) {
        // Chu·∫©n h√≥a d·ªØ li·ªáu officers ƒë·ªÉ lu√¥n c√≥ HoTen
        const officersData = response.data.map((o: any) => ({
          ...o,
          HoTen: o.HoTen || o.TenCanSu || '', // ∆Øu ti√™n HoTen, fallback TenCanSu
          ChucVu: o.ChucVu,
          MaNguoiDung: o.MaNguoiDung,
        }));
        setOfficers(officersData);
      } else {
        setOfficers([]);
      }
    } catch (error) {
      console.error('Error loading officers:', error);
      setOfficers([]);
    }
  };

  const loadRecentFeedbacks = async () => {
    try {
      const response = await axios.get(`${API_BASE}/api/danhgia`);
      if (response.data && Array.isArray(response.data)) {
        // ƒê·∫£m b·∫£o m·ªói feedback c√≥ ƒë·ªß c√°c tr∆∞·ªùng c·∫ßn thi·∫øt, tr√°nh l·ªói khi render
        const recentData = response.data
          .map((f: any) => ({
            MaDanhGia: f.MaDanhGia,
            TenCanSu: f.TenCanSu || '',
            TieuChi: f.TieuChi || '',
            NoiDung: f.NoiDung || '',
            TenNguoiGui: f.TenNguoiGui || '·∫®n danh',
            NgayGui: f.NgayGui || '',
            MucLabel: f.MucLabel || '',
            // C√°c tr∆∞·ªùng d∆∞·ªõi ƒë√¢y c√≥ th·ªÉ kh√¥ng c√≥ trong API, n√™n ƒë·ªÉ undefined n·∫øu kh√¥ng c√≥
            NguoiGui: f.NguoiGui,
            CanSuDuocDanhGia: f.CanSuDuocDanhGia,
            AnDanh: f.AnDanh !== undefined ? f.AnDanh : (f.TenNguoiGui === '·∫®n danh')
          }))
          .sort((a, b) => new Date(b.NgayGui).getTime() - new Date(a.NgayGui).getTime())
          .slice(0, 6);

        setRecentFeedbacks(recentData);

        const total = recentData.length;
        const ratings = recentData
          .map(f => getStarsFromCriteria(f.TieuChi, f.MucLabel))
          .filter(r => r > 0);
        const avgRating = ratings.length > 0
          ? ratings.reduce((sum, r) => sum + r, 0) / ratings.length
          : 0;

        setFeedbackStats({
          total,
          avgRating: Math.round(avgRating * 10) / 10
        });
      } else {
        setRecentFeedbacks([]);
        setFeedbackStats({ total: 0, avgRating: 0 });
      }
    } catch (error) {
      console.error('Error loading feedbacks:', error);
      setRecentFeedbacks([]);
      setFeedbackStats({ total: 0, avgRating: 0 });
    }
  };

 
  const normalizeCriteriaLabel = (tieuChi: string, mucLabel?: string): string => {
    // ∆Øu ti√™n MucLabel n·∫øu h·ª£p l·ªá
    const validLabels = ['C·∫ßn c·∫£i thi·ªán', 'Trung b√¨nh', 'Kh√°', 'T·ªët', 'Xu·∫•t s·∫Øc'];
    if (mucLabel && validLabels.includes(mucLabel)) return mucLabel;

    // Map c√°c ti√™u ch√≠ c≈© ho·∫∑c ƒë·∫∑c bi·ªát v·ªÅ nh√£n chu·∫©n
    const map: { [key: string]: string } = {
      'Xu·∫•t s·∫Øc': 'Xu·∫•t s·∫Øc',
      'T·ªët': 'T·ªët',
      'Kh√°': 'Kh√°',
      'Trung b√¨nh': 'Trung b√¨nh',
      'C·∫ßn c·∫£i thi·ªán': 'C·∫ßn c·∫£i thi·ªán',
      'T√≠ch c·ª±c': 'T·ªët',
      'ChƒÉm ch·ªâ': 'T·ªët',
      'R·∫•t t·ªët': 'T·ªët',
      'B√¨nh th∆∞·ªùng': 'Kh√°'
    };
    // N·∫øu l√† d·∫°ng "ƒêi·ªÉm: x"
    const match = tieuChi.match(/ƒêi·ªÉm: (\d)/);
    if (match) {
      const val = parseInt(match[1]);
      return validLabels[val - 1] || 'Kh√°';
    }
    return map[tieuChi] || 'Kh√°';
  };

  // L·∫•y s·ªë sao t·ª´ nh√£n chu·∫©n h√≥a
  const getStarsFromCriteria = (tieuChi: string, mucLabel?: string): number => {
    const label = normalizeCriteriaLabel(tieuChi, mucLabel);
    const criteriaMap: { [key: string]: number } = {
      'C·∫ßn c·∫£i thi·ªán': 1,
      'Trung b√¨nh': 2,
      'Kh√°': 3,
      'T·ªët': 4,
      'Xu·∫•t s·∫Øc': 5
    };
    return criteriaMap[label] || 3;
  };

  // L·∫•y m√†u s·∫Øc t·ª´ nh√£n chu·∫©n h√≥a
  const getCriteriaColor = (tieuChi: string, mucLabel?: string): string => {
    const stars = getStarsFromCriteria(tieuChi, mucLabel);
    const criteriaItem = CRITERIA_OPTIONS.find(opt => opt.value === stars);
    return criteriaItem?.color || '#6b7280';
  };

  // Hi·ªÉn th·ªã s·ªë sao t·ª´ nh√£n chu·∫©n h√≥a
  const getStarRating = (tieuChi: string, mucLabel?: string) => {
    const stars = getStarsFromCriteria(tieuChi, mucLabel);
    return stars > 0 ? '‚òÖ'.repeat(stars) + '‚òÜ'.repeat(5 - stars) : 'üìù';
  };

  const getCurrentCriteria = () => {
    return CRITERIA_OPTIONS.find(opt => opt.value === criteria) || CRITERIA_OPTIONS[2];
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setMsg(null);
    setError(null);
    setLoading(true);

    try {
      // N·∫øu g·ª≠i ·∫©n danh th√¨ b·∫Øt bu·ªôc ph·∫£i ch·ªçn c√°n s·ª±, m·ª©c ƒë·ªô v√† nh·∫≠p nh·∫≠n x√©t
      if (anonymous) {
        if (!selectedOfficer || !criteria || !comment.trim()) {
          setError('Thi·∫øu th√¥ng tin ƒë√°nh gi√°.');
          setLoading(false);
          return;
        }
      } else {
        // Kh√¥ng ·∫©n danh th√¨ ch·ªâ c·∫ßn ch·ªçn c√°n s·ª± v√† m·ª©c ƒë·ªô
        if (!selectedOfficer || !criteria) {
          setError('Thi·∫øu th√¥ng tin ƒë√°nh gi√°.');
          setLoading(false);
          return;
        }
      }

      const currentCriteria = getCurrentCriteria();
      if (isNaN(Number(selectedOfficer))) {
        setError('Vui l√≤ng ch·ªçn c√°n s·ª± h·ª£p l·ªá.');
        setLoading(false);
        return;
      }

      // L·∫•y ƒë√∫ng ID ng∆∞·ªùi d√πng hi·ªán t·∫°i khi g·ª≠i ƒë√°nh gi√°
      const payload = {
        NguoiGui: anonymous ? null : currentUserId,
        CanSuDuocDanhGia: Number(selectedOfficer),
        TieuChi: currentCriteria.text,
        NoiDung: comment || `ƒê√°nh gi√°: ${currentCriteria.text}`,
        AnDanh: anonymous ? true : false
      };

      // ƒê·ªïi endpoint sang /api/danhgia cho ƒë·ªìng b·ªô v·ªõi backend
      const response = await axios.post(`${API_BASE}/api/danhgia`, payload);

      if (response.data && response.data.success) {
        setMsg('ƒê√°nh gi√° ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!');
        setSelectedOfficer('');
        setCriteria(3);
        setComment('');
        setAnonymous(false);
        await loadRecentFeedbacks();
      } else {
        setError('C√≥ l·ªói x·∫£y ra khi g·ª≠i ƒë√°nh gi√°.');
      }

    } catch (err: any) {
      // Hi·ªÉn th·ªã l·ªói chi ti·∫øt t·ª´ backend n·∫øu c√≥
      setError(err?.response?.data?.message || 'Kh√¥ng th·ªÉ g·ª≠i ƒë√°nh gi√°. Vui l√≤ng th·ª≠ l·∫°i.');
    } finally {
      setLoading(false);
    }
  };

  const handleDeleteFeedback = async (feedbackId: number) => {
    if (!window.confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a ƒë√°nh gi√° n√†y?')) return;
    try {
      await axios.delete(`${API_BASE}/api/danhgia/${feedbackId}`);
      await loadRecentFeedbacks();
    } catch (err) {
      alert('Kh√¥ng th·ªÉ x√≥a ƒë√°nh gi√°. Vui l√≤ng th·ª≠ l·∫°i.');
    }
  };

  const getTimeAgo = (dateString: string) => {
    if (!dateString) return '';
    
    const now = new Date();
    const date = new Date(dateString);
    const diffInHours = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60));
    const diffInDays = Math.floor(diffInHours / 24);

    if (diffInDays > 0) return `${diffInDays} ng√†y tr∆∞·ªõc`;
    if (diffInHours > 0) return `${diffInHours} gi·ªù tr∆∞·ªõc`;
    return '';
  };

  if (dataLoading) {
    return (
      <div className="feedback-page">
        <div className="loading-container">
          <div className="loading-spinner"></div>
          <p>ƒêang t·∫£i d·ªØ li·ªáu...</p>
        </div>
      </div>
    );
  }

  const currentCriteria = getCurrentCriteria();

  // Gi·∫£ l·∫≠p id v√† t√™n ng∆∞·ªùi d√πng hi·ªán t·∫°i (c·∫ßn thay b·∫±ng d·ªØ li·ªáu th·ª±c t·∫ø khi c√≥ auth)
  const getCurrentUserId = () => {
    // V√≠ d·ª•: l∆∞u user v√†o localStorage d·∫°ng { MaNguoiDung: 123, ... }
    try {
      const userStr = localStorage.getItem('user');
      if (userStr) {
        const user = JSON.parse(userStr);
        return user.MaNguoiDung || user.userId || 1; // fallback 1 n·∫øu kh√¥ng c√≥
      }
    } catch {}
    return 1;
  };

  const currentUserId = getCurrentUserId();
  const currentUserName = "T√¥i";

  return (
    <div className="feedback-page">
      <div className="page-container">
        {/* Header */}
        <div className="page-header">
          <h1>ƒê√°nh gi√° c√°n s·ª± l·ªõp</h1>
          <p>ƒê√≥ng g√≥p √Ω ki·∫øn ƒë·ªÉ c·∫£i thi·ªán ho·∫°t ƒë·ªông l·ªõp</p>
        </div>

        <div className="content-grid">
          {/* Form Section */}
          <div className="form-section">
            <div className="form-card">
              <h2>G·ª≠i ƒë√°nh gi√°</h2>
              
              {msg && <div className="message success">{msg}</div>}
              {error && <div className="message error">{error}</div>}

              <form onSubmit={handleSubmit}>
                <div className="form-group">
                  <label>Ch·ªçn c√°n s·ª±</label>
                  <select
                    value={selectedOfficer}
                    onChange={e => setSelectedOfficer(e.target.value)}
                    required
                    disabled={officers.length === 0}
                  >
                    <option value="">
                      {officers.length === 0 ? "ƒêang t·∫£i..." : "-- Ch·ªçn c√°n s·ª± --"}
                    </option>
                    {officers.map(o => (
                      <option key={o.MaNguoiDung} value={o.MaNguoiDung}>
                        {o.HoTen}{o.ChucVu ? ` (${o.ChucVu})` : ''}
                      </option>
                    ))}
                  </select>
                </div>

                <div className="form-group" style={{ display: 'flex', alignItems: 'center', gap: 8 }}>
                  <input
                    type="checkbox"
                    id="anonymous"
                    checked={anonymous}
                    onChange={e => setAnonymous(e.target.checked)}
                    style={{ width: 18, height: 18 }}
                  />
                  <label htmlFor="anonymous" style={{ margin: 0, cursor: 'pointer', fontSize: '1rem' }}>
                    G·ª≠i ·∫©n danh
                  </label>
                </div>

                <div className="form-group">
                  <label>M·ª©c ƒë·ªô ƒë√°nh gi√°</label>
                  
                  <div className="rating-container">
                    <input
                      type="range"
                      min={1}
                      max={5}
                      value={criteria}
                      onChange={e => setCriteria(parseInt(e.target.value))}
                      className="rating-slider"
                      disabled={officers.length === 0}
                    />
                    
                    <div className="rating-labels">
                      {CRITERIA_OPTIONS.map(opt => (
                        <span 
                          key={opt.value}
                          className={criteria === opt.value ? 'active' : ''}
                          style={{ color: criteria === opt.value ? opt.color : '#9ca3af' }}
                        >
                          {opt.label}
                        </span>
                      ))}
                    </div>

                    <div className="rating-display">
                      <div className="rating-value" style={{ color: currentCriteria.color }}>
                        <span className="score">{criteria}</span>
                        <span className="stars">{'‚òÖ'.repeat(criteria)}{'‚òÜ'.repeat(5 - criteria)}</span>
                      </div>
                      <div className="rating-text">
                        <strong>{currentCriteria.text}</strong>
                      </div>
                    </div>
                  </div>
                </div>

                <div className="form-group">
                  <label>Nh·∫≠n x√©t <span className="optional">(t√πy ch·ªçn)</span></label>
                  <textarea
                    placeholder={`Nh·∫≠n x√©t v·ªÅ m·ª©c ƒë·ªô "${currentCriteria.text}" c·ªßa c√°n s·ª±...`}
                    value={comment}
                    onChange={e => setComment(e.target.value)}
                    rows={3}
                    disabled={officers.length === 0}
                  />
                </div>

                <button 
                  type="submit"
                  className="submit-btn"
                  disabled={loading || officers.length === 0}
                  style={{ backgroundColor: loading ? '#9ca3af' : currentCriteria.color }}
                >
                  {loading ? 'ƒêang g·ª≠i...' : `G·ª≠i ƒë√°nh gi√° "${currentCriteria.text}"`}
                </button>
              </form>
            </div>
          </div>

          {/* Recent Feedbacks */}
          <div className="feedback-section">
            <div className="feedback-card">
              <div className="feedback-header">
                <h2>ƒê√°nh gi√° g·∫ßn ƒë√¢y</h2>
                <div className="stats">
                  <span>{feedbackStats.total} ƒë√°nh gi√°</span>
                  <span>TB: {feedbackStats.avgRating}/5</span>
                </div>
              </div>
              
              <div className="feedback-list">
                {recentFeedbacks.length === 0 ? (
                  <div className="empty-state">
                    <p>Ch∆∞a c√≥ ƒë√°nh gi√° n√†o</p>
                  </div>
                ) : (
                  recentFeedbacks.map(feedback => {
                    const label = normalizeCriteriaLabel(feedback.TieuChi, feedback.MucLabel);
                    // Hi·ªÉn th·ªã t√™n ng∆∞·ªùi g·ª≠i: n·∫øu l√† ·∫©n danh th√¨ "·∫®n danh", n·∫øu l√† ng∆∞·ªùi ƒëƒÉng nh·∫≠p th√¨ "T√¥i", c√≤n l·∫°i l·∫•y t√™n t·ª´ API
                    let displaySender = "·∫®n danh";
                    if (feedback.TenNguoiGui !== "·∫®n danh") {
                      if (feedback.NguoiGui && feedback.NguoiGui === currentUserId) {
                        displaySender = "T√¥i";
                      } else {
                        displaySender = feedback.TenNguoiGui;
                      }
                    }
                    return (
                      <div key={feedback.MaDanhGia} className="feedback-item">
                        <div className="feedback-top">
                          <strong className="target-name">
                            {feedback.TenCanSu}
                            <span style={{ color: '#64748b', fontWeight: 400, marginLeft: 8, fontSize: '0.98em' }}>
                              {feedback.CanSuDuocDanhGia ? `(ID: ${feedback.CanSuDuocDanhGia})` : ''}
                            </span>
                          </strong>
                          <div className="rating-info">
                            <span 
                              className="stars"
                              style={{ color: getCriteriaColor(feedback.TieuChi, feedback.MucLabel) }}
                            >
                              {getStarRating(feedback.TieuChi, feedback.MucLabel)}
                            </span>
                            <span className="criteria">
                              {label}
                            </span>
                          </div>
                          {/* N√∫t x√≥a ch·ªâ hi·ªán v·ªõi feedback c·ªßa ch√≠nh m√¨nh */}
                          {feedback.NguoiGui === currentUserId && (
                            <button
                              className="delete-feedback-btn"
                              title="X√≥a ƒë√°nh gi√°"
                              style={{
                                marginLeft: 8,
                                background: 'none',
                                border: 'none',
                                color: '#d32f2f',
                                cursor: 'pointer',
                                fontSize: '1.1em'
                              }}
                              onClick={() => handleDeleteFeedback(feedback.MaDanhGia)}
                            >
                              üóë
                            </button>
                          )}
                        </div>
                        {feedback.NoiDung && (
                          <div className="feedback-content">
                            "{feedback.NoiDung}"
                          </div>
                        )}
                        <div className="feedback-bottom">
                          <span className="author">
                            Ng∆∞·ªùi g·ª≠i: <b>{displaySender}</b>
                          </span>
                          <span className="time">{getTimeAgo(feedback.NgayGui)}</span>
                          <span className="date" style={{ marginLeft: 8, color: '#64748b', fontSize: '0.95em' }}>
                            {feedback.NgayGui ? new Date(feedback.NgayGui).toLocaleString('vi-VN', { dateStyle: 'short', timeStyle: 'short' }) : ''}
                          </span>
                        </div>
                      </div>
                    );
                  })
                )}
              </div>

              {recentFeedbacks.length > 0 && (
                <div className="feedback-footer">
                  <button 
                    className="view-more"
                    onClick={() => window.location.href = '/reports'}
                  >
                    Xem th·ªëng k√™ chi ti·∫øt
                  </button>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default FeedbackPage;